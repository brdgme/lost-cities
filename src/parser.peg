use card::{Card, Expedition, Value};
use std::str::FromStr;
use command::Command;

expedition_red -> Expedition
  = "r"i { Expedition::Red }

expedition_green -> Expedition
  = "g"i { Expedition::Green }

expedition_blue -> Expedition
  = "b"i { Expedition::Blue }

expedition_white -> Expedition
  = "w"i { Expedition::White }

expedition_yellow -> Expedition
  = "y"i { Expedition::Yellow }

#[pub]
expedition -> Expedition
  = expedition_red
  / expedition_green
  / expedition_blue
  / expedition_white
  / expedition_yellow

value_n -> Value
  = [0-9]{1,2} {?
    let n = usize::from_str(match_str).unwrap();
    if n >= 2 && n <= 10 {
      Ok(Value::N(n))
    } else {
      Err("card number must be between 2 and 10")
    }
  }

value_investment -> Value
  = "x"i { Value::Investment }

#[pub]
value -> Value
  = value_investment
  / value_n

#[pub]
card -> Card
  = e:expedition v:value { Card{
    expedition: e,
    value: v,
  } }

play_command -> Command
  = "play"i " "+ c:card { Command::Play(c) }

discard_command -> Command
  = "discard"i " "+ c:card { Command::Discard(c) }

take_command -> Command
  = "take"i " "+ e:expedition { Command::Take(e) }

draw_command -> Command
  = "draw"i { Command::Draw }

#[pub]
command -> Command
  = play_command
  / discard_command
  / take_command
  / draw_command